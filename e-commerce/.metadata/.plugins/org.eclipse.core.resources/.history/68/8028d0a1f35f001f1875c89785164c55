package com.e_commerce.ProductService.ProductController;

import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.e_commerce.ProductService.Entity.ErrorResponse;
import com.e_commerce.ProductService.Entity.Product;
import com.e_commerce.ProductService.ProductDto.ProductDto;
import com.e_commerce.ProductService.ProductService.ProductService;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/product")
public class ProductController {
	private static final Logger logger = LoggerFactory.getLogger(ProductController.class);

	public ProductController(ProductService productService) {

		this.productService = productService;
	}

	@Autowired
	ProductService productService;

	@GetMapping("/")
	public ResponseEntity<List<Product>> getAllProducts() {
		List<Product> allProducts = productService.getAllProducts();
		return new ResponseEntity<>(allProducts, HttpStatus.OK);
	}

	@GetMapping("/{id}")
	public ResponseEntity<?> getProductById(@PathVariable Long id) {
		Optional<Product> productId = productService.getProductById(id);

		if (productId.isPresent()) {
			Product product = productId.get();
			return new ResponseEntity<>(product, HttpStatus.OK);
		} else {
			String errorMessage = "Product not found with ID: " + id;
			logger.error("Error: {} | Status: {}", errorMessage, HttpStatus.NOT_FOUND);
			ErrorResponse errorResponse = new ErrorResponse(errorMessage, HttpStatus.NOT_FOUND);
			return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("/{id}/{orderId}")
	public ResponseEntity<?> getProductById(@PathVariable Long id, @PathVariable Long orderId) {
		Optional<ProductDto> productId = productService.getProductById(id, orderId);

		if (productId.isPresent()) {
			ProductDto productDto = productId.get();
			return new ResponseEntity<>(productDto, HttpStatus.OK);
		} else {
			String errorMessage = "Product not found with ID: " + id;
			logger.error("Error: {} | Status: {}", errorMessage, HttpStatus.NOT_FOUND);
			ErrorResponse errorResponse = new ErrorResponse(errorMessage, HttpStatus.NOT_FOUND);
			return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
		}
	}

	@PostMapping("/")
	public ResponseEntity<Product> createProduct(@Valid @RequestBody Product product) {
		return ResponseEntity.ok(productService.createProduct(product));
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> updateProduct(@PathVariable Long id, @Valid @RequestBody Product updateProduct) {
		Optional<Product> updatedProduct = productService.updateProduct(id, updateProduct);
		if (updatedProduct.isPresent()) {
			Product updated = updatedProduct.get();
			return new ResponseEntity<>(updated, HttpStatus.OK);
		} else {
			String errorMessage = "User not found with ID: " + id;
			logger.error("Error: {} | Status: {} ", errorMessage, HttpStatus.NOT_FOUND);
			ErrorResponse errorResponse = new ErrorResponse(errorMessage, HttpStatus.NOT_FOUND);
			return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("/")
	public Boolean deleteProduct(Long id) {
		productService.deleteProduct(id);
		return true;
	}
}
