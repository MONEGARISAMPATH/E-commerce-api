package com.e_commerce.CategoryService.Dto;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.hibernate.validator.constraints.URL;

import jakarta.validation.constraints.Digits;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;

public class ProductDto {
	
	@NotBlank(message = "Name is mandatory")
	private String name;

	@Min(value = 0, message = "Price must be a positive value")
	@Digits(integer = 10, fraction = 2, message = "Price can have up to 10 digits before the decimal point "
			+ "and after deciaml point upto 2 fractional digits  allowed")
	private BigDecimal price;

	@NotBlank(message = "Slug cannot be blank")
	private String slug;

	@NotNull(message = "Stock cannot be null")
	@Min(value = 0, message = "Stock must be a non-negative number")
	private Long stock;

	@NotBlank(message = "Status cannot be blank")
	@Pattern(regexp = "^(AVAILABLE|OUT_OF_STOCK|DISCONTINUED)$", message = "Status must be one of the predefined values")
	private String status;

	@PastOrPresent(message = "Created date cannot be in the future")
	private LocalDateTime createdAt;

	@PastOrPresent(message = "Updated date cannot be in the future")
	private LocalDateTime updatedAt;

	@NotBlank(message = "Image URL cannot be blank. Please provide a valid URL.")
	@URL(message = "Image URL must be a valid URL in the format: https://example.com/images/product.jpg")
	private String imgUrl;

	
	
	


}
