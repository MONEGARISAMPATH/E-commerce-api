package com.e_commerce.UserService.Service;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.e_commerce.UserService.Clients.OrderServiceClient;
import com.e_commerce.UserService.Entity.User;
import com.e_commerce.UserService.Repository.UserRepository;
import com.e_commerce.UserService.UserDto.UserDto;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@Service
public class UserService {

    private static final Logger log = LoggerFactory.getLogger(UserService.class);

    @Autowired
    private OrderServiceClient orderServiceClient;

    @Autowired
    private UserRepository userRepository;

    public User createUser(User user) {
        return userRepository.save(user);
    }

    @CircuitBreaker(name = "OrderBreaker", fallbackMethod = "orderBreakerFallBack")
    public Optional<UserDto> getByUserId(Long id, Long orderId) {

        Optional<User> userOptional = userRepository.findById(id);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            UserDto userDto = new UserDto();
            userDto.setUser(user);

            // Fetch the order status from OrderServiceClient
            try {
                String status = orderServiceClient.getOrderStatus(orderId);
                userDto.setOrderStatus(status);
            } catch (Exception e) {
                // Log the exception
                log.error("Error fetching order status: {}", e.getMessage());
                // Optionally, you can handle specific exceptions here if needed
            }

            return Optional.of(userDto);
        } else {
            log.warn("User with ID {} not found", id);
            return Optional.empty();
        }
    }

    // Fallback method when OrderService is unavailable
    public Optional<UserDto> orderBreakerFallBack(Long id, Long orderId, Throwable throwable) {
        log.error("Fallback method invoked due to: {}", throwable.getMessage());

        // Create a UserDto with unavailable order status
        Optional<User> userOptional = userRepository.findById(id);
        if (userOptional.isPresent()) {
            User user = userOptional.get();
            UserDto userDto = new UserDto();
            userDto.setUser(user);
            userDto.setOrderStatus("Order status is unavailable");
            return Optional.of(userDto);
        } else {
            log.warn("User with ID {} not found during fallback");
            return Optional.empty();
        }
    }
}
