package com.e_commerce.UserService.Service;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.e_commerce.UserService.Clients.OrderServiceClient;
import com.e_commerce.UserService.Entity.User;
import com.e_commerce.UserService.Repository.UserRepository;
import com.e_commerce.UserService.UserDto.UserDto;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@Service
public class UserService {
	 private static final Logger log = LoggerFactory.getLogger(UserService.class);
	@Autowired
	OrderServiceClient orderServiceClient;
	@Autowired
	UserRepository userRepository;

	public User createUser(User user) {
		return userRepository.save(user);
	}

	@CircuitBreaker(name = "OrderBreaker", fallbackMethod = "orderBreakerFallBack")
	public Optional<UserDto> getByUserId(Long id, Long orderId) {

		Optional<User> userid = userRepository.findById(id);
		
		if(userid.isPresent()) {
			UserDto userDto =new UserDto();
			userDto.setUser(userid.get());
			
			String status= orderServiceClient.getOrderStatus(orderId);
			userDto.setOrderStatus(status);
			return Optional.of(userDto);
		}
			else {
				log.warn("User with ID {} not found", id);
				return Optional.empty();
			
			}
	}
	public Optional<UserDto> orderBreakerFallBack(Long id, Long orderId, Throwable throwable) {
		
		 log.error("Fallback method invoked due to: {}", throwable.getMessage());
	    UserDto userDto = new UserDto();
	    userDto.setOrderStatus("Order status is unavailable");
	    return Optional.of(userDto);
	}
}
